{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","IndexPage","_ref","data","console","log","a","createElement","title","keywords","allMarkdownRemark","edges","map","edge","node","fields","category","frontmatter","description","date","tags","tag","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","React","InternalPageRenderer","Object","assign","json","propTypes","PropTypes","shape","string","isRequired","SEO","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","array","arrayOf","StaticQueryContext","createContext","StaticQuery","props","react_default","Consumer","staticQueryData","render","children","object","func","Header","siteTitle","siteDescription","style","background","marginBottom","margin","maxWidth","padding","gatsby_link_default","to","color","textDecoration","Layout","gatsby_browser_entry_StaticQuery","Fragment","header","paddingTop","Date","getFullYear","_2363664672"],"mappings":"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","file":"component---src-pages-index-js-860487dbac0a02cedb6b.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({ data }) => {\n  console.log(data);\n  return (\n    <Layout>\n    <SEO title=\"Home\" keywords={[`geonho han`, `wisdom`, `all`]} />\n    {data.allMarkdownRemark.edges.map(edge => {\n      return (\n        <div>\n          <h1><span>@{edge.node.fields.category}</span> {edge.node.frontmatter.title}</h1>\n          <p>{edge.node.frontmatter.description}</p>\n          <time>{edge.node.frontmatter.date}</time>\n          <div>\n            {edge.node.frontmatter.tags.map(tag => {\n              return (\n                <span>#{tag} </span>\n              )\n            })}\n          </div>\n        </div>\n      )\n    })}\n  </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title,\n            description,\n            date(formatString: \"DD MMMM, YYYY\"),\n            tags\n          }\n          fields {\n            category\n          }\n        }\n      }\n    }\n  }\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle, siteDescription }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link> - {siteDescription}\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title,\n            description\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} siteDescription={data.site.siteMetadata.description} />\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n          }}\n        >\n          <main>{children}</main>\n          <footer>\n            © {new Date().getFullYear()}, GeonHo Han\n          </footer>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}